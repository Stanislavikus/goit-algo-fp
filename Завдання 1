class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            cur = self.head
            while cur.next:
                cur = cur.next
            cur.next = new_node

    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    def merge_sort(self):
        self.head = self._merge_sort_rec(self.head)

    def _merge_sort_rec(self, head):
        if not head or not head.next:
            return head

        middle = self._get_middle(head)
        next_to_middle = middle.next
        middle.next = None

        left = self._merge_sort_rec(head)
        right = self._merge_sort_rec(next_to_middle)

        sorted_list = self._sorted_merge(left, right)
        return sorted_list

    def _get_middle(self, head):
        if not head:
            return head
        slow = head
        fast = head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        return slow

    def _sorted_merge(self, a, b):
        if not a:
            return b
        if not b:
            return a
        if a.data <= b.data:
            result = a
            result.next = self._sorted_merge(a.next, b)
        else:
            result = b
            result.next = self._sorted_merge(a, b.next)
        return result


# Об'єднання двох відсортованих списків у новий відсортований список
def merge_sorted_lists(list1: LinkedList, list2: LinkedList) -> LinkedList:
    dummy = Node()
    tail = dummy

    a = list1.head
    b = list2.head

    while a and b:
        if a.data <= b.data:
            tail.next = a
            a = a.next
        else:
            tail.next = b
            b = b.next
        tail = tail.next

    tail.next = a if a else b

    merged = LinkedList()
    merged.head = dummy.next
    return merged


# Приклад використання:
ll1 = LinkedList()
ll2 = LinkedList()

for val in [10, 30, 50]:
    ll1.insert_at_end(val)

for val in [20, 40, 60]:
    ll2.insert_at_end(val)

print("Список 1:")
ll1.print_list()

print("Список 2:")
ll2.print_list()

merged = merge_sorted_lists(ll1, ll2)
print("\nОб'єднаний відсортований список:")
merged.print_list()

# Тест реверсу
print("\nРеверсований список:")
merged.reverse()
merged.print_list()

# Тест сортування
print("\nВідсортований список після реверсу:")
merged.merge_sort()
merged.print_list()

import uuid
import networkx as nx
import matplotlib.pyplot as plt
from collections import deque

def hex_color(index, total):
    # Від темного до світлого синього відтінку, щоб уникнути наприкінці білого
    start_r, start_g, start_b = 0x00, 0x00, 0x66  
    end_r, end_g, end_b = 0x33, 0x99, 0xff        

    ratio = index / max(total - 1, 1)

    r = int(start_r + (end_r - start_r) * ratio)
    g = int(start_g + (end_g - start_g) * ratio)
    b = int(start_b + (end_b - start_b) * ratio)

    return f"#{r:02x}{g:02x}{b:02x}"

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
        self.color = "#ADD8E6"  # default light blue
        self.id = str(uuid.uuid4())

def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.id, color=node.color, label=node.val)
        if node.left:
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph

def draw_tree(root, title=""):
    tree = nx.DiGraph()
    pos = {root.id: (0, 0)}
    tree = add_edges(tree, root, pos)
    colors = [node[1]['color'] for node in tree.nodes(data=True)]
    labels = {node[0]: node[1]['label'] for node in tree.nodes(data=True)}

    plt.figure(figsize=(8, 5))
    nx.draw(tree, pos=pos, labels=labels, arrows=False, node_size=2500, node_color=colors)
    plt.title(title)
    plt.show()

def bfs(root):
    queue = deque([root])
    visited = []
    while queue:
        node = queue.popleft()
        if node:
            visited.append(node)
            queue.append(node.left)
            queue.append(node.right)
    return visited

def dfs(root):
    stack = [root]
    visited = []
    while stack:
        node = stack.pop()
        if node:
            visited.append(node)
            stack.append(node.right)  # спочатку правий, щоб лівий був першим
            stack.append(node.left)
    return visited

def color_nodes_by_order(nodes):
    total = len(nodes)
    for i, node in enumerate(nodes):
        node.color = hex_color(i, total)

# Тестове дерево
root = Node(0)
root.left = Node(4)
root.left.left = Node(5)
root.left.right = Node(10)
root.right = Node(1)
root.right.left = Node(3)

# DFS
dfs_order = dfs(root)
color_nodes_by_order(dfs_order)
draw_tree(root, title="DFS Обхід (в глибину)")

# Перевстановлюємо кольори
for node in dfs_order:
    node.color = "#ADD8E6"

# BFS
bfs_order = bfs(root)
color_nodes_by_order(bfs_order)
draw_tree(root, title="BFS Обхід (в ширину)")
